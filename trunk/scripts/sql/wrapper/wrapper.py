"""
Generated by <Python Project Utils>
Visit the project in http://code.google.com/p/python-project-utils/
"""

from .. import util

class Wrapper:
	@classmethod
	def find_by_attribute(cls, attribute, value):
		return cls.__find_by_column_value(cls._attributes_columns[attribute], value)

	@classmethod
	def find_by_id(cls, id):
		return cls.find_by_attribute("_id", id)

	@classmethod
	def find_all(cls):
		return cls.__find_all_by_query("SELECT * FROM {0}".format(cls._table))

	@classmethod
	def find_all_by_attribute(cls, attribute, value):
		return cls.__find_all_by_column_value(cls._attributes_columns[attribute], value)

	@classmethod
	def find_all_by_foreign_key(cls, foreign_key, wrapper):
		return cls.__find_all_by_column_value(foreign_key, wrapper.get_id())

	@classmethod
	def find_all_where(cls, where, order_by = None):
		values = []
		values.append(cls._table)
		values.append(where)
		query = "SELECT * FROM {0} WHERE {1}"

		if order_by is not None:
			values.append(order_by)
			query += " ORDER BY {2}"

		return cls.__find_all_by_query(query.format(*values))

	@classmethod
	def save_all(cls, wrappers, belongs_to = None, foreign_key = None):
		connection = util.ConnectionManager.get_connection()

		with connection:
			for wrapper in wrappers:
				if wrapper._id is not None:
					wrapper._update(connection, belongs_to, foreign_key)
				else:
					wrapper._insert(connection, belongs_to, foreign_key)

		connection.close()

	@classmethod
	def destroy_all(cls, wrappers):
		connection = util.ConnectionManager.get_connection()

		with connection:
			for wrapper in wrappers:
				wrapper._destroy(connection)

		connection.close()

	@classmethod
	def destroy_all_where(cls, where):
		connection = util.ConnectionManager.get_connection()

		with connection:
			connection.execute("DELETE FROM {0} WHERE {1}".format(cls._table, where))

		connection.close()

	@classmethod
	def __find_by_column_value(cls, column, value):
		return cls.__find_by_query("SELECT * FROM {0} WHERE {1} = {2}".format(cls._table, column, value))
	
	@classmethod
	def __find_all_by_column_value(cls, column, value):
		return cls.__find_all_by_query("SELECT * FROM {0} WHERE {1} = {2}".format(cls._table, column, value))

	@classmethod
	def __find_by_query(cls, query):
		wrapper = cls()
		connection = util.ConnectionManager.get_connection()
		result = connection.execute(query).fetchone()

		if result:
			for attribute, column in cls._attributes_columns.items():
				setattr(wrapper, attribute, result[column])

		connection.close()

		return wrapper

	@classmethod
	def __find_all_by_query(cls, query):
		wrappers = []
		connection = util.ConnectionManager.get_connection()
		result = connection.execute(query).fetchall()

		for item in result:
			wrapper = cls()
			wrappers.append(wrapper)

			for attribute, column in cls._attributes_columns.items():
				setattr(wrapper, attribute, item[column])

		connection.close()

		return wrappers
	
	def __init__(self, id = None):
		self._id = id

	def get_id(self):
		return self._id

	def set_id(self, id):
		self._id = id

	def save(self, belongs_to = None, foreign_key = None):
		connection = util.ConnectionManager.get_connection()

		with connection:
			if self._id is not None:
				self._update(connection, belongs_to, foreign_key)
			else:
				self._insert(connection, belongs_to, foreign_key)

		connection.close()

	def destroy(self):
		connection = util.ConnectionManager.get_connection()

		with connection:
			self._destroy(connection)

		connection.close()
		

	def _destroy(self, connecntion):
		connection.execute("DELETE FROM {0} WHERE id = {1}".format(self.__class__._table, self._id))

	def _update(self, connection, belongs_to = None, foreign_key = None):
		columns, values = self._build_save_resources(belongs_to, foreign_key)
		result = connection.execute("INSERT INTO {0}({1}) VALUES({2})".format(self.__class__._table, columns, None), values)

	def _insert(self, connection, belongs_to = None, foreign_key = None):
		columns, values = self._build_save_resources(belongs_to, foreign_key)
		mask = ""

		for i in range(len(values)):
			if len(mask) > 0:
				mask += ","

			mask += "?"

		cursor = connection.execute("INSERT INTO {0}({1}) VALUES({2})".format(self.__class__._table, columns, mask), values)
		self._id = cursor.lastrowid

	def _build_save_resources(self, belongs_to, foreign_key):
		columns = ""
		values = []

		for attribute, column in self.__class__._attributes_columns.items():
			if column != "id":
				if len(columns) > 0:
					columns += ","

				columns += column
				values.append(getattr(self, attribute))

		if belongs_to is not None:
			if len(columns) > 0:
				columns += ","

			columns += foreign_key
			values.append(belongs_to.get_id())

		return columns, values
