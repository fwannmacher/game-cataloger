"""
Generated by <Python Project Utils>
Visit the project in http://code.google.com/p/python-project-utils/
"""

import pygtk
pygtk.require('2.0')
import gtk
import os
import glob

class CoverLoader:
	@staticmethod
	def load(path, manufacturer, device, game, width, height):
		pixel_buffer = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, True, 8, width, height)
		pixel_buffer.fill(0x00000000)
		scaled_pixel_buffer = CoverLoader._get_scaled_pixel_buffer(path, manufacturer, device, game, width, height)
		scaled_width = scaled_pixel_buffer.get_width()
		scaled_height = scaled_pixel_buffer.get_height()
		scaled_pixel_buffer.copy_area(0, 0, scaled_width, scaled_height, pixel_buffer, (width - scaled_width) / 2, (height - scaled_height) / 2)

		return pixel_buffer

	@staticmethod
	def _get_scaled_pixel_buffer(path, manufacturer, device, game, width, height):
		pixel_buffer = gtk.gdk.pixbuf_new_from_file(CoverLoader._get_file_name(os.path.join(path, "covers", manufacturer.get_name(), device.get_name()), game.get_media_id()))
		width_resize_percentage = width / float(pixel_buffer.get_width())
		height_resize_percentage = height / float(pixel_buffer.get_height())
		resize_factor = width_resize_percentage if width_resize_percentage < height_resize_percentage else height_resize_percentage
		width = int(pixel_buffer.get_width() * resize_factor)
		height = int(pixel_buffer.get_height() * resize_factor)
		
		return pixel_buffer.scale_simple(width, height, gtk.gdk.INTERP_HYPER)

	@staticmethod
	def _get_file_name(covers_path, media_id):
		result = glob.glob("{0}.*".format(os.path.join(covers_path, media_id)))

		if len(result):
			return result[0]

		return os.path.join(covers_path, "default.png")
